/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub const __GBM__: ::std::os::raw::c_uchar = 1;
pub const _STDINT_H: ::std::os::raw::c_uchar = 1;
pub const _FEATURES_H: ::std::os::raw::c_uchar = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uchar = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uchar = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uchar = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uchar = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uchar = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uchar = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uchar = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uchar = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uchar = 1;
pub const __USE_MISC: ::std::os::raw::c_uchar = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uchar = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uchar = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uchar = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uchar = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uchar = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201505;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uchar = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uchar = 6;
pub const __GLIBC__: ::std::os::raw::c_uchar = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uchar = 23;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uchar = 1;
pub const __WORDSIZE: ::std::os::raw::c_uchar = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uchar = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uchar = 64;
pub const _BITS_WCHAR_H: ::std::os::raw::c_uchar = 1;
pub const INT8_MIN: ::std::os::raw::c_char = -128;
pub const INT16_MIN: ::std::os::raw::c_short = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MAX: ::std::os::raw::c_uchar = 127;
pub const INT16_MAX: ::std::os::raw::c_ushort = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT8_MAX: ::std::os::raw::c_uchar = 255;
pub const UINT16_MAX: ::std::os::raw::c_ushort = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::std::os::raw::c_char = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_short = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uchar = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_ushort = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uchar = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_ushort = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::std::os::raw::c_char = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST32_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uchar = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT_FAST32_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uchar = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_char = -1;
pub const UINT_FAST32_MAX: ::std::os::raw::c_char = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_char = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIZE_MAX: ::std::os::raw::c_char = -1;
pub const WINT_MIN: ::std::os::raw::c_uchar = 0;
pub const WINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const GBM_FORMAT_BIG_ENDIAN: ::std::os::raw::c_uint = 2147483648;
pub const GBM_BO_IMPORT_WL_BUFFER: ::std::os::raw::c_ushort = 21761;
pub const GBM_BO_IMPORT_EGL_IMAGE: ::std::os::raw::c_ushort = 21762;
pub const GBM_BO_IMPORT_FD: ::std::os::raw::c_ushort = 21763;
pub type ptrdiff_t = isize;
pub type size_t = usize;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
impl ::std::default::Default for max_align_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type uint8_t = u8;
pub type uint16_t = u16;
pub type uint32_t = u32;
pub type uint64_t = u64;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub enum gbm_device { }
pub enum gbm_bo { }
pub enum gbm_surface { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct gbm_bo_handle {
    pub _bindgen_data_: [u64; 1usize],
}
impl gbm_bo_handle {
    pub unsafe fn ptr(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn s32(&mut self) -> *mut int32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn u32_(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn s64(&mut self) -> *mut int64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn u64_(&mut self) -> *mut uint64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for gbm_bo_handle {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gbm_bo_format {
    GBM_BO_FORMAT_XRGB8888 = 0,
    GBM_BO_FORMAT_ARGB8888 = 1,
}
pub const GBM_BO_USE_CURSOR_64X64: gbm_bo_flags =
    gbm_bo_flags::GBM_BO_USE_CURSOR;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gbm_bo_flags {
    GBM_BO_USE_SCANOUT = 1,
    GBM_BO_USE_CURSOR = 2,
    GBM_BO_USE_RENDERING = 4,
    GBM_BO_USE_WRITE = 8,
    GBM_BO_USE_LINEAR = 16,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct gbm_import_fd_data {
    pub fd: ::std::os::raw::c_int,
    pub width: uint32_t,
    pub height: uint32_t,
    pub stride: uint32_t,
    pub format: uint32_t,
}
impl ::std::default::Default for gbm_import_fd_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum gbm_bo_transfer_flags {
    GBM_BO_TRANSFER_READ = 1,
    GBM_BO_TRANSFER_WRITE = 2,
    GBM_BO_TRANSFER_READ_WRITE = 3,
}
#[link(name = "gbm", kind = "dylib")]
extern "C" {
    pub fn gbm_device_get_fd(gbm: *mut gbm_device) -> ::std::os::raw::c_int;
    pub fn gbm_device_get_backend_name(gbm: *mut gbm_device)
     -> *const ::std::os::raw::c_char;
    pub fn gbm_device_is_format_supported(gbm: *mut gbm_device,
                                          format: uint32_t, usage: uint32_t)
     -> ::std::os::raw::c_int;
    pub fn gbm_device_destroy(gbm: *mut gbm_device);
    pub fn gbm_create_device(fd: ::std::os::raw::c_int) -> *mut gbm_device;
    pub fn gbm_bo_create(gbm: *mut gbm_device, width: uint32_t,
                         height: uint32_t, format: uint32_t, flags: uint32_t)
     -> *mut gbm_bo;
    pub fn gbm_bo_import(gbm: *mut gbm_device, type_: uint32_t,
                         buffer: *mut ::std::os::raw::c_void, usage: uint32_t)
     -> *mut gbm_bo;
    pub fn gbm_bo_map(bo: *mut gbm_bo, x: uint32_t, y: uint32_t,
                      width: uint32_t, height: uint32_t, flags: uint32_t,
                      stride: *mut uint32_t,
                      map_data: *mut *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn gbm_bo_unmap(bo: *mut gbm_bo,
                        map_data: *mut ::std::os::raw::c_void);
    pub fn gbm_bo_get_width(bo: *mut gbm_bo) -> uint32_t;
    pub fn gbm_bo_get_height(bo: *mut gbm_bo) -> uint32_t;
    pub fn gbm_bo_get_stride(bo: *mut gbm_bo) -> uint32_t;
    pub fn gbm_bo_get_format(bo: *mut gbm_bo) -> uint32_t;
    pub fn gbm_bo_get_device(bo: *mut gbm_bo) -> *mut gbm_device;
    pub fn gbm_bo_get_handle(bo: *mut gbm_bo) -> gbm_bo_handle;
    pub fn gbm_bo_get_fd(bo: *mut gbm_bo) -> ::std::os::raw::c_int;
    pub fn gbm_bo_write(bo: *mut gbm_bo, buf: *const ::std::os::raw::c_void,
                        count: size_t) -> ::std::os::raw::c_int;
    pub fn gbm_bo_set_user_data(bo: *mut gbm_bo,
                                data: *mut ::std::os::raw::c_void,
                                destroy_user_data:
                                    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut gbm_bo,
                                                                               arg2:
                                                                                   *mut ::std::os::raw::c_void)>);
    pub fn gbm_bo_get_user_data(bo: *mut gbm_bo)
     -> *mut ::std::os::raw::c_void;
    pub fn gbm_bo_destroy(bo: *mut gbm_bo);
    pub fn gbm_surface_create(gbm: *mut gbm_device, width: uint32_t,
                              height: uint32_t, format: uint32_t,
                              flags: uint32_t) -> *mut gbm_surface;
    pub fn gbm_surface_needs_lock_front_buffer(surface: *mut gbm_surface)
     -> ::std::os::raw::c_int;
    pub fn gbm_surface_lock_front_buffer(surface: *mut gbm_surface)
     -> *mut gbm_bo;
    pub fn gbm_surface_release_buffer(surface: *mut gbm_surface,
                                      bo: *mut gbm_bo);
    pub fn gbm_surface_has_free_buffers(surface: *mut gbm_surface)
     -> ::std::os::raw::c_int;
    pub fn gbm_surface_destroy(surface: *mut gbm_surface);
}
